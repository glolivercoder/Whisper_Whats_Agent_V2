#!/usr/bin/env python3
"""
Testa se a corre√ß√£o da voz clonada funcionou
"""

import sys
import os
sys.path.append('backend')

def test_cloned_voice_fix():
    """Testa se a voz clonada est√° usando o m√©todo correto"""
    print("üß™ TESTANDO CORRE√á√ÉO DA VOZ CLONADA")
    print("=" * 50)
    
    try:
        # Configurar licen√ßa
        os.environ["COQUI_TOS_AGREED"] = "1"
        
        # Importar classe do backend
        from main_enhanced import TTSService
        
        # Criar inst√¢ncia do servi√ßo TTS
        print("üîÑ Inicializando TTSService...")
        tts_service = TTSService()
        
        if not tts_service.coqui_tts:
            print("‚ùå Coqui TTS n√£o carregado")
            return False
        
        print("‚úÖ TTSService inicializado")
        
        # Testar m√©todo clone_voice_working diretamente
        print("\nüîÑ Testando m√©todo clone_voice_working...")
        
        result = tts_service.clone_voice_working(
            text="Teste de clonagem de voz funcionando.",
            language="pt"
        )
        
        if result["success"]:
            print("‚úÖ M√©todo clone_voice_working funcionou!")
            print(f"üìä Tamanho do √°udio: {len(result.get('audio_base64', ''))} chars base64")
        else:
            print(f"‚ùå M√©todo clone_voice_working falhou: {result.get('error')}")
            return False
        
        # Testar synthesize_speech com voz clonada
        print("\nüîÑ Testando synthesize_speech com voz clonada...")
        
        import asyncio
        
        async def test_synthesize():
            result = await tts_service.synthesize_speech(
                text="Teste de voz clonada via synthesize_speech.",
                voice="cloned_test",
                engine="coqui"
            )
            return result
        
        result = asyncio.run(test_synthesize())
        
        if result["success"]:
            print("‚úÖ synthesize_speech com voz clonada funcionou!")
            print(f"üìä Tamanho do √°udio: {len(result.get('audio_base64', ''))} chars base64")
            return True
        else:
            print(f"‚ùå synthesize_speech com voz clonada falhou: {result.get('error', 'Unknown error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    success = test_cloned_voice_fix()
    
    if success:
        print("\nüéâ CORRE√á√ÉO DA VOZ CLONADA FUNCIONOU!")
        print("O servidor agora deve usar o m√©todo que funciona")
    else:
        print("\n‚ùå Ainda h√° problemas com a voz clonada")
    
    return success

if __name__ == "__main__":
    success = main()