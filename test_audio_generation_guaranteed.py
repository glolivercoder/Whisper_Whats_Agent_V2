#!/usr/bin/env python3
"""
Teste garantido de gera√ß√£o de √°udio
"""

import requests
import subprocess
import time
import sys
import os
import base64
from threading import Thread

class AudioGenerationTester:
    def __init__(self):
        self.server_process = None
        self.server_ready = False
    
    def start_server(self):
        """Inicia o servidor corrigido"""
        print("üöÄ Iniciando servidor com corre√ß√µes de √°udio...")
        
        try:
            self.server_process = subprocess.Popen(
                ["./start_enhanced_correct.bat"],
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True
            )
            
            # Monitor logs
            Thread(target=self.monitor_logs, daemon=True).start()
            
            return True
        except Exception as e:
            print(f"‚ùå Erro ao iniciar servidor: {e}")
            return False
    
    def monitor_logs(self):
        """Monitora logs do servidor"""
        if not self.server_process:
            return
            
        for line in iter(self.server_process.stdout.readline, ''):
            if line:
                print(f"[SERVER] {line.strip()}")
                if "Application startup complete" in line or "Uvicorn running" in line:
                    self.server_ready = True
    
    def wait_for_server(self, timeout=120):
        """Aguarda servidor ficar pronto"""
        print("‚è≥ Aguardando servidor...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                response = requests.get("http://localhost:8001/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Servidor pronto!")
                    return True
            except:
                pass
            
            time.sleep(2)
        
        print("‚ùå Timeout aguardando servidor")
        return False
    
    def test_audio_generation_detailed(self):
        """Teste detalhado de gera√ß√£o de √°udio"""
        print("\\nüé≠ TESTE DETALHADO DE GERA√á√ÉO DE √ÅUDIO")
        print("=" * 60)
        
        # 1. Verificar vozes dispon√≠veis
        print("üìã Verificando vozes dispon√≠veis...")
        try:
            response = requests.get("http://localhost:8001/api/tts/list-cloned-voices", timeout=30)
            if response.status_code == 200:
                voices_data = response.json()
                voices = voices_data.get('voices', [])
                print(f"‚úÖ {len(voices)} vozes encontradas")
                
                if not voices:
                    print("‚ùå Nenhuma voz dispon√≠vel!")
                    return False
                
                # Usar a primeira voz dispon√≠vel
                test_voice = voices[0]['name']
                print(f"üé§ Usando voz: {test_voice}")
            else:
                print(f"‚ùå Erro ao listar vozes: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao verificar vozes: {e}")
            return False
        
        # 2. Teste de gera√ß√£o de √°udio
        print(f"\\nüéµ Testando gera√ß√£o de √°udio com {test_voice}...")
        
        test_data = {
            "text": "Este √© um teste definitivo de gera√ß√£o de √°udio. O sistema deve funcionar perfeitamente agora.",
            "voice": test_voice,
            "language": "pt",
            "engine": "xtts_v2"
        }
        
        try:
            print(f"üì§ Enviando requisi√ß√£o: {test_data}")
            
            response = requests.post(
                "http://localhost:8001/api/tts",
                json=test_data,
                timeout=120
            )
            
            print(f"üì• Status HTTP: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                print("üìä AN√ÅLISE DA RESPOSTA:")
                print(f"   Success: {result.get('success')}")
                print(f"   Message: {result.get('message')}")
                print(f"   Engine: {result.get('engine')}")
                print(f"   Voice: {result.get('voice_name')}")
                print(f"   File Size: {result.get('file_size', 0)} bytes")
                
                # Verificar √°udio
                audio_data = result.get('audio_data')
                if audio_data:
                    audio_size = len(audio_data)
                    print(f"   Audio Data: {audio_size} caracteres")
                    
                    # Verificar se √© base64 v√°lido
                    try:
                        decoded = base64.b64decode(audio_data)
                        decoded_size = len(decoded)
                        print(f"   Audio Decoded: {decoded_size} bytes")
                        
                        if decoded_size > 10000:  # Pelo menos 10KB
                            print("üéâ √ÅUDIO GERADO COM SUCESSO!")
                            print(f"‚úÖ Tamanho adequado: {decoded_size} bytes")
                            
                            # Salvar arquivo para verifica√ß√£o
                            with open("test_audio_output.wav", "wb") as f:
                                f.write(decoded)
                            print("üíæ √Åudio salvo como: test_audio_output.wav")
                            
                            return True
                        else:
                            print(f"‚ùå √Åudio muito pequeno: {decoded_size} bytes")
                            return False
                            
                    except Exception as e:
                        print(f"‚ùå Erro ao decodificar base64: {e}")
                        return False
                else:
                    print("‚ùå Nenhum √°udio retornado!")
                    return False
            else:
                print(f"‚ùå Erro HTTP: {response.status_code}")
                print(f"   Resposta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return False
    
    def stop_server(self):
        """Para o servidor"""
        if self.server_process:
            print("üõë Parando servidor...")
            try:
                self.server_process.terminate()
                self.server_process.wait(timeout=10)
            except:
                self.server_process.kill()
    
    def run_complete_test(self):
        """Executa teste completo"""
        print("üß™ TESTE COMPLETO DE GERA√á√ÉO DE √ÅUDIO")
        print("=" * 60)
        
        try:
            # Iniciar servidor
            if not self.start_server():
                print("‚ùå Falha ao iniciar servidor")
                return False
            
            # Aguardar servidor
            if not self.wait_for_server():
                print("‚ùå Servidor n√£o ficou pronto")
                return False
            
            # Testar gera√ß√£o de √°udio
            success = self.test_audio_generation_detailed()
            
            print("\\n" + "=" * 60)
            if success:
                print("üéâ TESTE COMPLETO: SUCESSO!")
                print("‚úÖ Gera√ß√£o de √°udio funcionando perfeitamente!")
                print("‚úÖ Sistema pronto para uso!")
            else:
                print("‚ùå TESTE COMPLETO: FALHOU!")
                print("‚ùå Gera√ß√£o de √°udio n√£o est√° funcionando")
            print("=" * 60)
            
            return success
            
        finally:
            self.stop_server()

def main():
    tester = AudioGenerationTester()
    return tester.run_complete_test()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)