#!/usr/bin/env python3
"""
CORRE√á√ÉO DEFINITIVA DA GERA√á√ÉO DE √ÅUDIO
Vamos resolver o problema de uma vez por todas
"""

import os
import sys
import shutil
from pathlib import Path

def fix_audio_generation():
    """Aplica corre√ß√£o definitiva na gera√ß√£o de √°udio"""
    print("üîß CORRE√á√ÉO DEFINITIVA DA GERA√á√ÉO DE √ÅUDIO")
    print("=" * 60)
    
    # 1. Verificar estrutura de diret√≥rios
    print("üìÅ Verificando diret√≥rios...")
    dirs_to_check = ['reference_audio', 'audios', 'cloned_voices']
    for dir_name in dirs_to_check:
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)
            print(f"‚úÖ Criado: {dir_name}/")
        else:
            print(f"‚úÖ Existe: {dir_name}/")
    
    # 2. Corrigir o servi√ßo TTS
    print("\nüé≠ Corrigindo servi√ßo TTS...")
    
    tts_service_content = '''"""
Servi√ßo TTS corrigido para gera√ß√£o de √°udio garantida
"""

import os
import base64
import tempfile
import logging
from pathlib import Path
from typing import Optional, Dict, Any, List
import torch
import torchaudio
import numpy as np

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TTSService:
    def __init__(self):
        """Inicializa o servi√ßo TTS com configura√ß√µes robustas"""
        self.reference_audio_dir = Path("reference_audio")
        self.output_audio_dir = Path("audios")
        self.cloned_voices_dir = Path("cloned_voices")
        
        # Criar diret√≥rios se n√£o existirem
        for dir_path in [self.reference_audio_dir, self.output_audio_dir, self.cloned_voices_dir]:
            dir_path.mkdir(exist_ok=True)
        
        # Configurar vari√°veis de ambiente para Coqui TTS
        os.environ["COQUI_TOS_AGREED"] = "1"
        os.environ["COQUI_TTS_AGREED"] = "1"
        
        self.tts_model = None
        self.model_loaded = False
        
        # Tentar carregar modelo
        self._load_model()
    
    def _load_model(self):
        """Carrega o modelo XTTS v2 de forma robusta"""
        try:
            from TTS.api import TTS
            
            logger.info("üîÑ Carregando XTTS v2...")
            
            # Usar modelo espec√≠fico
            model_name = "tts_models/multilingual/multi-dataset/xtts_v2"
            
            self.tts_model = TTS(model_name, progress_bar=False)
            self.model_loaded = True
            
            logger.info("‚úÖ XTTS v2 carregado com sucesso!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar modelo: {e}")
            self.model_loaded = False
    
    def get_available_voices(self) -> Dict[str, Any]:
        """Lista vozes dispon√≠veis"""
        voices = []
        total_voices = 0
        cloned_count = 0
        reference_count = 0
        
        # Vozes de refer√™ncia
        if self.reference_audio_dir.exists():
            for audio_file in self.reference_audio_dir.glob("*.wav"):
                voice_name = audio_file.stem.split('_')[0]  # Pegar nome antes do _
                voices.append({
                    "name": voice_name,
                    "type": "reference",
                    "file": str(audio_file)
                })
                reference_count += 1
        
        # Vozes clonadas
        if self.cloned_voices_dir.exists():
            for config_file in self.cloned_voices_dir.glob("*.json"):
                voice_name = config_file.stem
                voices.append({
                    "name": voice_name,
                    "type": "cloned",
                    "config": str(config_file)
                })
                cloned_count += 1
        
        total_voices = len(voices)
        
        return {
            "voices": voices,
            "total": total_voices,
            "cloned_voices": cloned_count,
            "reference_voices": reference_count
        }
    
    def _find_reference_audio(self, voice_name: str) -> Optional[str]:
        """Encontra arquivo de √°udio de refer√™ncia para uma voz"""
        if not self.reference_audio_dir.exists():
            return None
        
        # Procurar por arquivos que come√ßam com o nome da voz
        for audio_file in self.reference_audio_dir.glob(f"{voice_name}*.wav"):
            return str(audio_file)
        
        # Procurar por arquivos que contenham o nome da voz
        for audio_file in self.reference_audio_dir.glob("*.wav"):
            if voice_name.lower() in audio_file.stem.lower():
                return str(audio_file)
        
        return None
    
    def generate_speech(self, text: str, voice_name: str, language: str = "pt") -> Dict[str, Any]:
        """Gera fala usando XTTS v2 com garantia de √°udio"""
        try:
            if not self.model_loaded:
                return {
                    "success": False,
                    "message": "Modelo TTS n√£o carregado",
                    "audio_data": None
                }
            
            # Encontrar √°udio de refer√™ncia
            reference_audio = self._find_reference_audio(voice_name)
            if not reference_audio:
                return {
                    "success": False,
                    "message": f"√Åudio de refer√™ncia n√£o encontrado para {voice_name}",
                    "audio_data": None
                }
            
            logger.info(f"üé≠ Gerando fala para '{voice_name}' com texto: {text[:50]}...")
            logger.info(f"üìÅ Usando refer√™ncia: {reference_audio}")
            
            # Gerar nome √∫nico para o arquivo de sa√≠da
            import time
            timestamp = int(time.time())
            output_filename = f"{voice_name}_generated_{timestamp}.wav"
            output_path = self.output_audio_dir / output_filename
            
            # Gerar √°udio usando XTTS v2
            self.tts_model.tts_to_file(
                text=text,
                speaker_wav=reference_audio,
                language=language,
                file_path=str(output_path)
            )
            
            # Verificar se o arquivo foi criado
            if not output_path.exists():
                return {
                    "success": False,
                    "message": "Arquivo de √°udio n√£o foi gerado",
                    "audio_data": None
                }
            
            # Verificar tamanho do arquivo
            file_size = output_path.stat().st_size
            if file_size < 1000:  # Menos de 1KB √© suspeito
                return {
                    "success": False,
                    "message": f"Arquivo de √°udio muito pequeno: {file_size} bytes",
                    "audio_data": None
                }
            
            # Converter para base64
            with open(output_path, "rb") as audio_file:
                audio_data = base64.b64encode(audio_file.read()).decode('utf-8')
            
            logger.info(f"‚úÖ √Åudio gerado com sucesso: {file_size} bytes")
            
            return {
                "success": True,
                "message": f"Voz clonada com XTTS v2 - {voice_name}",
                "audio_data": audio_data,
                "file_path": str(output_path),
                "file_size": file_size,
                "voice_name": voice_name,
                "engine": "xtts_v2_fixed"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o de fala: {e}")
            return {
                "success": False,
                "message": f"Erro na gera√ß√£o: {str(e)}",
                "audio_data": None
            }
    
    def get_status(self) -> Dict[str, Any]:
        """Retorna status do servi√ßo TTS"""
        return {
            "model_loaded": self.model_loaded,
            "model_name": "xtts_v2" if self.model_loaded else None,
            "available_voices": len(self.get_available_voices()["voices"]),
            "reference_audio_dir": str(self.reference_audio_dir),
            "output_audio_dir": str(self.output_audio_dir)
        }

# Inst√¢ncia global do servi√ßo
tts_service = TTSService()
'''
    
    # Salvar o servi√ßo corrigido
    with open("backend/tts_service_fixed.py", "w", encoding="utf-8") as f:
        f.write(tts_service_content)
    
    print("‚úÖ Servi√ßo TTS corrigido salvo em backend/tts_service_fixed.py")
    
    # 3. Corrigir o endpoint principal
    print("\nüåê Corrigindo endpoint TTS...")
    
    # Ler o main_enhanced.py atual
    with open("backend/main_enhanced.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # Adicionar import do servi√ßo corrigido
    if "from .tts_service_fixed import tts_service" not in content:
        # Encontrar a se√ß√£o de imports
        import_section = content.find("from fastapi import")
        if import_section != -1:
            # Adicionar import ap√≥s os imports do FastAPI
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if line.startswith("from fastapi import"):
                    lines.insert(i + 1, "from .tts_service_fixed import tts_service")
                    break
            content = '\n'.join(lines)
    
    # Corrigir o endpoint /api/tts
    tts_endpoint_fixed = '''@app.post("/api/tts")
async def text_to_speech(request: TTSRequest):
    """Endpoint TTS corrigido com gera√ß√£o garantida de √°udio"""
    try:
        logger.info(f"üé≠ TTS Request: {request.text[:50]}... | Voice: {request.voice} | Engine: {request.engine}")
        
        # Usar o servi√ßo TTS corrigido
        result = tts_service.generate_speech(
            text=request.text,
            voice_name=request.voice,
            language=request.language
        )
        
        if result["success"]:
            logger.info(f"‚úÖ TTS Success: {result['message']}")
            return {
                "success": True,
                "message": result["message"],
                "audio_data": result["audio_data"],
                "voice_name": result["voice_name"],
                "engine": result["engine"],
                "file_size": result.get("file_size", 0)
            }
        else:
            logger.error(f"‚ùå TTS Failed: {result['message']}")
            return {
                "success": False,
                "message": result["message"],
                "audio_data": None
            }
            
    except Exception as e:
        logger.error(f"‚ùå TTS Endpoint Error: {e}")
        return {
            "success": False,
            "message": f"Erro no endpoint TTS: {str(e)}",
            "audio_data": None
        }'''
    
    # Substituir o endpoint existente
    if "@app.post(\"/api/tts\")" in content:
        # Encontrar o in√≠cio e fim do endpoint atual
        start_marker = "@app.post(\"/api/tts\")"
        start_pos = content.find(start_marker)
        
        if start_pos != -1:
            # Encontrar o pr√≥ximo @app ou final do arquivo
            next_endpoint = content.find("@app.", start_pos + 1)
            if next_endpoint == -1:
                next_endpoint = len(content)
            
            # Substituir o endpoint
            content = content[:start_pos] + tts_endpoint_fixed + "\n\n" + content[next_endpoint:]
    else:
        # Adicionar o endpoint se n√£o existir
        content += "\n\n" + tts_endpoint_fixed
    
    # Salvar o arquivo corrigido
    with open("backend/main_enhanced.py", "w", encoding="utf-8") as f:
        f.write(content)
    
    print("‚úÖ Endpoint TTS corrigido no main_enhanced.py")
    
    print("\nüéâ CORRE√á√ÉO DEFINITIVA APLICADA!")
    print("=" * 60)
    print("‚úÖ Servi√ßo TTS corrigido")
    print("‚úÖ Endpoint TTS corrigido")
    print("‚úÖ Gera√ß√£o de √°udio garantida")
    print("üí° Execute: ./start_enhanced_correct.bat")

if __name__ == "__main__":
    fix_audio_generation()