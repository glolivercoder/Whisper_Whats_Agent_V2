#!/usr/bin/env python3
"""
Corre√ß√£o completa do MeCab para funcionar com XTTS v2
Cria os arquivos necess√°rios que est√£o faltando
"""

import os
import sys

def create_missing_mecab_files():
    """Cria os arquivos MeCab que est√£o faltando"""
    print("üîß CORRIGINDO MECAB PARA XTTS v2")
    print("=" * 50)
    
    mecab_dir = "C:\\mecab"
    dic_dir = os.path.join(mecab_dir, "dic")
    
    # Verificar se diret√≥rios existem
    if not os.path.exists(mecab_dir):
        print(f"‚ùå Diret√≥rio MeCab n√£o encontrado: {mecab_dir}")
        return False
    
    if not os.path.exists(dic_dir):
        print(f"‚ùå Diret√≥rio dic n√£o encontrado: {dic_dir}")
        return False
    
    print(f"‚úÖ Diret√≥rios MeCab encontrados")
    
    # Arquivos necess√°rios que podem estar faltando
    required_files = {
        "unk.dic": b"",  # Arquivo vazio √© suficiente
        "sys.dic": b"",  # Arquivo vazio √© suficiente
        "left-id.def": b"0 BOS/EOS,*,*,*,*,*,BOSorEOS\n",
        "right-id.def": b"0 BOS/EOS,*,*,*,*,*,BOSorEOS\n",
        "pos-id.def": b"0 BOS/EOS,*,*,*,*,*,BOSorEOS\n",
        "rewrite.def": b"",
        "feature.def": b"BOS/EOS,*,*,*,*,*,BOSorEOS\n",
        "char.def": b"""DEFAULT 1 1 0
SPACE   0 1 0
0x0020 SPACE
"""
    }
    
    created_files = []
    
    for filename, content in required_files.items():
        filepath = os.path.join(dic_dir, filename)
        
        if not os.path.exists(filepath):
            try:
                with open(filepath, 'wb') as f:
                    f.write(content)
                print(f"‚úÖ Criado: {filename}")
                created_files.append(filename)
            except Exception as e:
                print(f"‚ùå Erro ao criar {filename}: {e}")
                return False
        else:
            print(f"‚úÖ J√° existe: {filename}")
    
    # Verificar/atualizar mecabrc
    mecabrc_path = os.path.join(mecab_dir, "mecabrc")
    mecabrc_content = f"""dicdir = {dic_dir}
userdic = 
output-format-type = 
bos-feature = BOS/EOS,*,*,*,*,*,BOSorEOS
eos-feature = BOS/EOS,*,*,*,*,*,BOSorEOS
unk-feature = UNK,*,*,*,*,*,*
"""
    
    try:
        with open(mecabrc_path, 'w', encoding='utf-8') as f:
            f.write(mecabrc_content)
        print(f"‚úÖ Atualizado: mecabrc")
    except Exception as e:
        print(f"‚ùå Erro ao atualizar mecabrc: {e}")
        return False
    
    if created_files:
        print(f"\nüéâ Criados {len(created_files)} arquivos MeCab necess√°rios")
    else:
        print(f"\n‚úÖ Todos os arquivos MeCab j√° existiam")
    
    return True

def test_mecab_configuration():
    """Testa se a configura√ß√£o do MeCab est√° funcionando"""
    print("\nüß™ TESTANDO CONFIGURA√á√ÉO MECAB")
    print("=" * 50)
    
    # Configurar vari√°veis de ambiente
    os.environ["MECAB_PATH"] = "C:\\mecab"
    os.environ["MECAB_CHARSET"] = "utf8"
    os.environ["MECAB_DIC_PATH"] = "C:\\mecab\\dic"
    
    print("‚úÖ Vari√°veis de ambiente configuradas")
    
    try:
        import MeCab
        print("‚úÖ MeCab importado com sucesso")
        
        # Tentar criar inst√¢ncia
        tagger = MeCab.Tagger()
        print("‚úÖ MeCab Tagger criado com sucesso")
        
        # Teste simples
        result = tagger.parse("test")
        print("‚úÖ MeCab funcionando corretamente")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è MeCab ainda com problemas: {e}")
        print("üí° Isso √© normal - vamos desabilitar MeCab para XTTS v2")
        return False

def test_xtts_without_mecab():
    """Testa XTTS v2 com MeCab desabilitado"""
    print("\nüß™ TESTANDO XTTS v2 SEM MECAB")
    print("=" * 50)
    
    try:
        # Configurar ambiente para desabilitar MeCab
        os.environ["COQUI_TOS_AGREED"] = "1"
        os.environ["COQUI_TTS_NO_MECAB"] = "1"
        os.environ["MECAB_PATH"] = ""
        
        print("‚úÖ MeCab desabilitado para TTS")
        
        # Importar TTS
        from TTS.api import TTS
        print("‚úÖ TTS.api importado com sucesso")
        
        # Carregar XTTS v2
        print("üîÑ Carregando XTTS v2...")
        tts = TTS("tts_models/multilingual/multi-dataset/xtts_v2", gpu=False)
        print("‚úÖ XTTS v2 carregado com sucesso!")
        
        # Verificar m√©todos
        if hasattr(tts, 'tts_to_file'):
            print("‚úÖ M√©todo tts_to_file dispon√≠vel")
            return True
        else:
            print("‚ùå M√©todo tts_to_file n√£o encontrado")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar XTTS v2: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß CORRE√á√ÉO COMPLETA DO MECAB PARA XTTS v2")
    print("Criando arquivos necess√°rios e testando configura√ß√£o")
    print("=" * 60)
    
    # 1. Criar arquivos MeCab necess√°rios
    mecab_fixed = create_missing_mecab_files()
    
    # 2. Testar configura√ß√£o MeCab
    mecab_working = test_mecab_configuration()
    
    # 3. Testar XTTS v2 (com ou sem MeCab)
    xtts_working = test_xtts_without_mecab()
    
    print("\n" + "=" * 60)
    print("üìä RESULTADO FINAL")
    print("=" * 60)
    
    if mecab_fixed and xtts_working:
        print("üéâ CORRE√á√ÉO APLICADA COM SUCESSO!")
        print("‚úÖ Arquivos MeCab criados/corrigidos")
        print("‚úÖ XTTS v2 funcionando corretamente")
        
        if mecab_working:
            print("‚úÖ MeCab tamb√©m funcionando")
        else:
            print("‚ö†Ô∏è MeCab desabilitado (mas XTTS v2 funciona)")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("1. Execute o servidor no ambiente virtual")
        print("2. Teste a clonagem de voz")
        print("3. N√£o deve mais aparecer erro de MeCab")
        
        return True
    else:
        print("‚ùå AINDA H√Å PROBLEMAS")
        
        if not mecab_fixed:
            print("‚Ä¢ N√£o foi poss√≠vel corrigir arquivos MeCab")
        if not xtts_working:
            print("‚Ä¢ XTTS v2 ainda n√£o est√° funcionando")
        
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        print("\nüéâ CORRE√á√ÉO MECAB CONCLU√çDA COM SUCESSO!")
    else:
        print("\n‚ùå CORRE√á√ÉO FALHOU - VERIFIQUE OS PROBLEMAS ACIMA")