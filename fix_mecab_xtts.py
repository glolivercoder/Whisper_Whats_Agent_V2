#!/usr/bin/env python3
"""
Corre√ß√£o do MeCab para XTTS v2 funcionar corretamente
"""

import os
import sys
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fix_mecab_configuration():
    """Corrige a configura√ß√£o do MeCab para XTTS v2"""
    logger.info("üîß Corrigindo configura√ß√£o do MeCab...")
    
    try:
        # M√©todo 1: Desabilitar MeCab completamente (mais seguro)
        logger.info("üîÑ Desabilitando MeCab para evitar conflitos...")
        
        os.environ["COQUI_TTS_NO_MECAB"] = "1"
        os.environ["MECAB_PATH"] = ""
        os.environ["MECAB_CHARSET"] = ""
        os.environ["MECAB_DIC_PATH"] = ""
        
        # Configura√ß√µes adicionais para desabilitar MeCab
        os.environ["DISABLE_MECAB"] = "1"
        os.environ["NO_MECAB"] = "1"
        
        logger.info("‚úÖ MeCab desabilitado via vari√°veis de ambiente")
        
        # M√©todo 2: Tentar configurar MeCab corretamente (fallback)
        mecab_dir = "C:\\mecab"
        if os.path.exists(mecab_dir):
            logger.info("üîÑ Tentando configurar MeCab existente...")
            
            # Configurar caminhos do MeCab
            os.environ["MECAB_PATH"] = mecab_dir
            os.environ["MECAB_DIC_PATH"] = os.path.join(mecab_dir, "dic")
            os.environ["MECAB_RC"] = os.path.join(mecab_dir, "mecabrc")
            
            logger.info(f"üìç MECAB_PATH: {mecab_dir}")
            logger.info(f"üìç MECAB_DIC_PATH: {os.path.join(mecab_dir, 'dic')}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao configurar MeCab: {e}")
        return False

def test_xtts_without_mecab():
    """Testa XTTS v2 com MeCab desabilitado"""
    logger.info("üß™ Testando XTTS v2 com MeCab desabilitado...")
    
    try:
        # Configurar ambiente
        os.environ["COQUI_TOS_AGREED"] = "1"
        
        # Desabilitar MeCab completamente
        fix_mecab_configuration()
        
        # Suprimir warnings
        import warnings
        warnings.filterwarnings("ignore", category=UserWarning)
        warnings.filterwarnings("ignore", category=FutureWarning)
        
        # Importar TTS
        from TTS.api import TTS
        logger.info("‚úÖ TTS.api importado com sucesso")
        
        # Tentar carregar XTTS v2
        logger.info("üîÑ Carregando XTTS v2 sem MeCab...")
        tts = TTS("tts_models/multilingual/multi-dataset/xtts_v2", gpu=False)
        logger.info("‚úÖ XTTS v2 carregado com sucesso!")
        
        # Verificar m√©todos
        if hasattr(tts, 'tts_to_file'):
            logger.info("‚úÖ M√©todo tts_to_file dispon√≠vel")
            return tts
        else:
            logger.error("‚ùå M√©todo tts_to_file n√£o encontrado")
            return None
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar XTTS v2: {e}")
        return None

def test_simple_synthesis(tts_instance):
    """Testa s√≠ntese simples com XTTS v2"""
    logger.info("üîÑ Testando s√≠ntese simples...")
    
    try:
        # Criar √°udio de refer√™ncia dummy
        import numpy as np
        import soundfile as sf
        
        # Gerar √°udio sint√©tico
        duration = 2.0
        sample_rate = 22050
        t = np.linspace(0, duration, int(sample_rate * duration))
        audio = 0.3 * np.sin(2 * np.pi * 440 * t)
        
        # Salvar como refer√™ncia
        ref_path = "test_reference.wav"
        sf.write(ref_path, audio, sample_rate)
        
        if not os.path.exists(ref_path):
            logger.error("‚ùå N√£o foi poss√≠vel criar √°udio de refer√™ncia")
            return False
        
        logger.info(f"‚úÖ √Åudio de refer√™ncia criado: {ref_path}")
        
        # Testar s√≠ntese
        output_path = "test_output_mecab_fix.wav"
        
        tts_instance.tts_to_file(
            text="Testing XTTS version 2 without MeCab conflicts.",
            file_path=output_path,
            speaker_wav=ref_path,
            language="en"
        )
        
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            logger.info(f"‚úÖ S√≠ntese funcionou: {output_path} ({file_size} bytes)")
            
            # Limpar arquivos de teste
            os.remove(ref_path)
            os.remove(output_path)
            
            return True
        else:
            logger.error("‚ùå Arquivo de sa√≠da n√£o foi gerado")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro na s√≠ntese: {e}")
        return False

def create_mecab_fix_script():
    """Cria script para aplicar corre√ß√£o do MeCab"""
    logger.info("üìù Criando script de corre√ß√£o do MeCab...")
    
    script_content = '''
def apply_mecab_fix():
    """Aplica corre√ß√£o do MeCab no main_enhanced.py"""
    import os
    import warnings
    
    # Desabilitar MeCab completamente
    os.environ["COQUI_TTS_NO_MECAB"] = "1"
    os.environ["MECAB_PATH"] = ""
    os.environ["MECAB_CHARSET"] = ""
    os.environ["MECAB_DIC_PATH"] = ""
    os.environ["DISABLE_MECAB"] = "1"
    os.environ["NO_MECAB"] = "1"
    
    # Suprimir warnings do MeCab
    warnings.filterwarnings("ignore", message=".*MeCab.*")
    warnings.filterwarnings("ignore", message=".*mecab.*")
    
    return True

def load_xtts_v2_without_mecab():
    """Carrega XTTS v2 com MeCab desabilitado"""
    try:
        # Aplicar corre√ß√£o do MeCab
        apply_mecab_fix()
        
        # Configurar ambiente
        import os
        import warnings
        import platform
        
        warnings.filterwarnings("ignore")
        os.environ["COQUI_TOS_AGREED"] = "1"
        
        if platform.system() == "Windows":
            os.environ["COQUI_TTS_NO_MECAB"] = "1"
            os.environ["PYTHONIOENCODING"] = "utf-8"
        
        # Importar TTS API
        from TTS.api import TTS
        
        # Inicializar XTTS v2
        tts = TTS("tts_models/multilingual/multi-dataset/xtts_v2", gpu=False)
        
        return tts
        
    except Exception as e:
        print(f"Erro ao carregar XTTS v2: {e}")
        return None
'''
    
    with open("mecab_fix_implementation.py", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    logger.info("‚úÖ Script de corre√ß√£o criado: mecab_fix_implementation.py")

def main():
    """Fun√ß√£o principal"""
    print("üîß CORRE√á√ÉO DO MECAB PARA XTTS v2")
    print("Resolvendo conflitos do MeCab no Windows")
    print("=" * 60)
    
    # 1. Corrigir configura√ß√£o do MeCab
    mecab_ok = fix_mecab_configuration()
    if not mecab_ok:
        print("‚ùå Falha ao configurar MeCab")
        return False
    
    # 2. Testar XTTS v2 sem MeCab
    tts_instance = test_xtts_without_mecab()
    if not tts_instance:
        print("‚ùå XTTS v2 n√£o carregou mesmo com corre√ß√£o do MeCab")
        return False
    
    # 3. Testar s√≠ntese simples
    synthesis_ok = test_simple_synthesis(tts_instance)
    if not synthesis_ok:
        print("‚ùå S√≠ntese n√£o funcionou")
        return False
    
    # 4. Criar script de corre√ß√£o
    create_mecab_fix_script()
    
    print("\n" + "=" * 60)
    print("üìä RESULTADO FINAL")
    print("=" * 60)
    
    print("üéâ CORRE√á√ÉO DO MECAB APLICADA COM SUCESSO!")
    print("‚úÖ MeCab desabilitado para evitar conflitos")
    print("‚úÖ XTTS v2 carregando corretamente")
    print("‚úÖ S√≠ntese funcionando perfeitamente")
    print("‚úÖ Script de corre√ß√£o criado")
    
    print("\nüîß CORRE√á√ïES APLICADAS:")
    print("‚Ä¢ MeCab completamente desabilitado via vari√°veis de ambiente")
    print("‚Ä¢ XTTS v2 funcionando sem depend√™ncia do MeCab")
    print("‚Ä¢ Warnings do MeCab suprimidos")
    print("‚Ä¢ Configura√ß√£o robusta para Windows")
    
    print("\nüöÄ PR√ìXIMOS PASSOS:")
    print("1. Integrar corre√ß√£o no main_enhanced.py")
    print("2. Reiniciar servidor com venv ativo")
    print("3. Testar clonagem na interface")
    
    return True

if __name__ == "__main__":
    success = main()
    
    if success:
        print("\nüéâ CORRE√á√ÉO DO MECAB CONCLU√çDA COM SUCESSO!")
    else:
        print("\n‚ùå CORRE√á√ÉO FALHOU - VERIFIQUE OS ERROS ACIMA")