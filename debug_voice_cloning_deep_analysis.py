#!/usr/bin/env python3
"""
An√°lise profunda dos problemas na clonagem de voz
"""

import os
import sys
import requests
import json
import subprocess
import time
import threading
from datetime import datetime

def check_reference_audio_files():
    """Verifica se existem arquivos de refer√™ncia para clonagem"""
    print("üîç Verificando arquivos de refer√™ncia de √°udio...")
    
    reference_dirs = [
        "reference_audio",
        "backend/reference_audio",
        "cloned_voices", 
        "backend/cloned_voices"
    ]
    
    found_files = []
    
    for directory in reference_dirs:
        if os.path.exists(directory):
            print(f"   üìÅ Diret√≥rio encontrado: {directory}")
            files = [f for f in os.listdir(directory) if f.endswith(('.wav', '.mp3', '.flac'))]
            if files:
                print(f"      Arquivos de √°udio: {len(files)}")
                for file in files:
                    file_path = os.path.join(directory, file)
                    file_size = os.path.getsize(file_path)
                    print(f"      ‚Ä¢ {file} ({file_size} bytes)")
                    found_files.append(file_path)
            else:
                print(f"      ‚ùå Nenhum arquivo de √°udio encontrado")
        else:
            print(f"   ‚ùå Diret√≥rio n√£o existe: {directory}")
    
    if not found_files:
        print("\n‚ùå PROBLEMA CR√çTICO: Nenhum arquivo de refer√™ncia encontrado!")
        print("üí° A clonagem de voz precisa de arquivos de refer√™ncia (.wav, .mp3)")
        return False
    
    print(f"\n‚úÖ Total de arquivos de refer√™ncia: {len(found_files)}")
    return True

def check_xtts_v2_installation():
    """Verifica se o XTTS v2 est√° instalado corretamente"""
    print("\nüîç Verificando instala√ß√£o do XTTS v2...")
    
    try:
        sys.path.append('backend')
        from TTS.api import TTS
        
        print("‚úÖ TTS importado com sucesso")
        
        # Tentar carregar XTTS v2
        model_name = "tts_models/multilingual/multi-dataset/xtts_v2"
        print(f"   Testando modelo: {model_name}")
        
        tts = TTS(model_name=model_name, progress_bar=False, gpu=False)
        print("‚úÖ XTTS v2 carregado com sucesso")
        
        # Verificar idiomas suportados
        if hasattr(tts, 'languages'):
            languages = tts.languages
            print(f"   Idiomas suportados: {languages}")
            if 'pt' in languages:
                print("‚úÖ Portugu√™s (pt) suportado")
            else:
                print("‚ùå Portugu√™s (pt) n√£o encontrado nos idiomas suportados")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o TTS: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao carregar XTTS v2: {e}")
        return False

def analyze_server_logs_detailed():
    """Analisa os logs do servidor em detalhes"""
    print("\nüîç Iniciando an√°lise detalhada dos logs do servidor...")
    
    # Iniciar servidor e capturar todos os logs
    process = subprocess.Popen(
        ['python', '-m', 'uvicorn', 'main_enhanced:app', '--host', '0.0.0.0', '--port', '8000'],
        cwd='backend',
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        bufsize=1
    )
    
    logs = []
    server_ready = False
    
    def capture_logs():
        nonlocal server_ready, logs
        while True:
            line = process.stdout.readline()
            if line:
                timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                log_entry = f"[{timestamp}] {line.strip()}"
                logs.append(log_entry)
                print(log_entry)
                
                if "Application startup complete" in line:
                    server_ready = True
                    
            if process.poll() is not None:
                break
    
    log_thread = threading.Thread(target=capture_logs, daemon=True)
    log_thread.start()
    
    # Aguardar servidor inicializar
    print("‚è≥ Aguardando servidor inicializar...")
    timeout = 60
    start_time = time.time()
    
    while not server_ready and (time.time() - start_time) < timeout:
        time.sleep(1)
    
    if not server_ready:
        print("‚ùå Servidor n√£o inicializou em 60 segundos")
        process.terminate()
        return None, logs
    
    print("‚úÖ Servidor inicializado, aguardando mais 3 segundos...")
    time.sleep(3)
    
    # Fazer requisi√ß√£o de teste
    print("\nüß™ Fazendo requisi√ß√£o de teste para clonagem...")
    
    test_data = {
        "text": "Teste de clonagem de voz em portugu√™s.",
        "voice_name": "crianca",
        "language": "pt"
    }
    
    try:
        response = requests.post(
            "http://localhost:8000/api/tts/test-clone",
            json=test_data,
            timeout=60
        )
        
        print(f"üì• Resposta da requisi√ß√£o:")
        print(f"   Status: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   Resposta JSON: {json.dumps(result, indent=2)}")
        else:
            print(f"   Erro: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    # Aguardar mais logs
    print("\n‚è≥ Aguardando logs adicionais por 10 segundos...")
    time.sleep(10)
    
    # Parar servidor
    print("\nüõë Parando servidor...")
    process.terminate()
    time.sleep(2)
    if process.poll() is None:
        process.kill()
    
    return response if 'response' in locals() else None, logs

def analyze_logs_for_errors(logs):
    """Analisa os logs em busca de erros espec√≠ficos"""
    print("\nüîç Analisando logs em busca de erros...")
    
    error_patterns = {
        "Language not supported": r"Language .* is not supported",
        "File not found": r"FileNotFoundError|No such file",
        "Permission denied": r"PermissionError|Permission denied",
        "CUDA/GPU error": r"CUDA|GPU|torch",
        "Import error": r"ImportError|ModuleNotFoundError",
        "Audio processing": r"audio|wav|mp3",
        "XTTS error": r"XTTS|xtts",
        "Cloning error": r"clone|cloning",
        "Memory error": r"MemoryError|OutOfMemoryError",
        "Timeout": r"timeout|Timeout"
    }
    
    found_errors = {}
    
    for log in logs:
        for error_type, pattern in error_patterns.items():
            import re
            if re.search(pattern, log, re.IGNORECASE):
                if error_type not in found_errors:
                    found_errors[error_type] = []
                found_errors[error_type].append(log)
    
    if found_errors:
        print("‚ùå Erros encontrados nos logs:")
        for error_type, error_logs in found_errors.items():
            print(f"\n   üî¥ {error_type}:")
            for error_log in error_logs[:3]:  # Mostrar apenas os primeiros 3
                print(f"      {error_log}")
    else:
        print("‚úÖ Nenhum erro √≥bvio encontrado nos logs")
    
    return found_errors

def diagnose_root_cause():
    """Diagn√≥stica a causa raiz do problema"""
    print("\nüéØ DIAGN√ìSTICO DA CAUSA RAIZ")
    print("=" * 60)
    
    issues = []
    
    # 1. Verificar arquivos de refer√™ncia
    if not check_reference_audio_files():
        issues.append({
            "type": "CR√çTICO",
            "problem": "Arquivos de refer√™ncia ausentes",
            "solution": "Criar diret√≥rio reference_audio/ com arquivos .wav de exemplo"
        })
    
    # 2. Verificar XTTS v2
    if not check_xtts_v2_installation():
        issues.append({
            "type": "CR√çTICO", 
            "problem": "XTTS v2 n√£o instalado ou com problemas",
            "solution": "Reinstalar TTS: pip install TTS"
        })
    
    # 3. Analisar logs do servidor
    response, logs = analyze_server_logs_detailed()
    
    # 4. Analisar erros nos logs
    log_errors = analyze_logs_for_errors(logs)
    
    for error_type, error_logs in log_errors.items():
        issues.append({
            "type": "ERRO",
            "problem": f"Erro nos logs: {error_type}",
            "solution": f"Verificar: {error_logs[0] if error_logs else 'N/A'}"
        })
    
    # 5. Verificar resposta da API
    if response:
        if response.status_code != 200:
            issues.append({
                "type": "API",
                "problem": f"API retornou status {response.status_code}",
                "solution": f"Verificar endpoint e dados: {response.text}"
            })
    
    return issues

def main():
    print("üîß AN√ÅLISE PROFUNDA DOS PROBLEMAS DE CLONAGEM DE VOZ")
    print("=" * 70)
    
    issues = diagnose_root_cause()
    
    print("\n" + "=" * 70)
    print("üìã RESUMO DOS PROBLEMAS ENCONTRADOS:")
    print("=" * 70)
    
    if not issues:
        print("‚úÖ Nenhum problema cr√≠tico identificado")
        print("üí° O sistema deveria estar funcionando")
    else:
        for i, issue in enumerate(issues, 1):
            print(f"\n{i}. [{issue['type']}] {issue['problem']}")
            print(f"   üí° Solu√ß√£o: {issue['solution']}")
    
    print("\n" + "=" * 70)
    print("üéØ PR√ìXIMOS PASSOS RECOMENDADOS:")
    print("=" * 70)
    
    if any(issue['type'] == 'CR√çTICO' for issue in issues):
        print("1. Resolver problemas CR√çTICOS primeiro")
        print("2. Criar arquivos de refer√™ncia se necess√°rio")
        print("3. Verificar instala√ß√£o do TTS")
    else:
        print("1. Verificar logs detalhados acima")
        print("2. Testar com arquivo de refer√™ncia espec√≠fico")
        print("3. Verificar configura√ß√µes de idioma")
    
    print("=" * 70)

if __name__ == "__main__":
    main()